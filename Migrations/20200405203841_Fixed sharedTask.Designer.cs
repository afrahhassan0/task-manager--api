// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _netCoreBackend.Models;
using _netCoreBackend.Models.Enums;
using _netCoreBackend.Models.Objects;

namespace _netCoreBackend.Migrations
{
    [DbContext(typeof(ManagerContext))]
    [Migration("20200405203841_Fixed sharedTask")]
    partial class FixedsharedTask
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:role", "admin,member")
                .HasAnnotation("Npgsql:Enum:status", "open,doing,reviewing,done")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("_netCoreBackend.Models.Credentials", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<int>("User_Id")
                        .HasColumnType("integer");

                    b.HasKey("Username");

                    b.HasIndex("User_Id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("_netCoreBackend.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasColumnType("character varying(15)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("GroupId");

                    b.HasIndex("AdminUsername");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("_netCoreBackend.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<Checklist>>("Checklists")
                        .HasColumnType("jsonb");

                    b.Property<string>("Deadline")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Status>("Status")
                        .HasColumnType("status");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Task");
                });

            modelBuilder.Entity("_netCoreBackend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("CustomBackgroundColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("#e1e1e1");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Role>("Role")
                        .HasColumnType("role");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("_netCoreBackend.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .HasColumnType("integer");

                    b.Property<string>("MemberUsername")
                        .HasColumnType("character varying(15)");

                    b.HasKey("GroupID", "MemberUsername");

                    b.HasIndex("MemberUsername");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("_netCoreBackend.Models.PrivateTask", b =>
                {
                    b.HasBaseType("_netCoreBackend.Models.Task");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(15)");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("PrivateTask");
                });

            modelBuilder.Entity("_netCoreBackend.Models.SharedTasks", b =>
                {
                    b.HasBaseType("_netCoreBackend.Models.Task");

                    b.Property<string[]>("AdminComments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("CredentialsUsername")
                        .HasColumnType("character varying(15)");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasIndex("CredentialsUsername");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("SharedTasks");
                });

            modelBuilder.Entity("_netCoreBackend.Models.Admin", b =>
                {
                    b.HasBaseType("_netCoreBackend.Models.User");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("_netCoreBackend.Models.Credentials", b =>
                {
                    b.HasOne("_netCoreBackend.Models.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_netCoreBackend.Models.Group", b =>
                {
                    b.HasOne("_netCoreBackend.Models.Credentials", "AdminAccount")
                        .WithMany("Groups")
                        .HasForeignKey("AdminUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_netCoreBackend.Models.UserGroup", b =>
                {
                    b.HasOne("_netCoreBackend.Models.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_netCoreBackend.Models.Credentials", "UserAccount")
                        .WithMany("Memberships")
                        .HasForeignKey("MemberUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_netCoreBackend.Models.PrivateTask", b =>
                {
                    b.HasOne("_netCoreBackend.Models.Credentials", "OwnerAccount")
                        .WithMany("PrivateTasks")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("_netCoreBackend.Models.SharedTasks", b =>
                {
                    b.HasOne("_netCoreBackend.Models.Credentials", null)
                        .WithMany("SharedTasks")
                        .HasForeignKey("CredentialsUsername");

                    b.HasOne("_netCoreBackend.Models.Group", "Group")
                        .WithMany("SharedTasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
